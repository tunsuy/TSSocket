// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_encrypt_2eproto__INCLUDED
#define PROTOBUF_encrypt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace com {
namespace sangfor {
namespace moa {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_encrypt_2eproto();
void protobuf_AssignDesc_encrypt_2eproto();
void protobuf_ShutdownFile_encrypt_2eproto();

class PB_AthCryptReq;
class PB_AthCryptRsp;

// ===================================================================

class PB_AthCryptReq : public ::google::protobuf::Message {
 public:
  PB_AthCryptReq();
  virtual ~PB_AthCryptReq();
  
  PB_AthCryptReq(const PB_AthCryptReq& from);
  
  inline PB_AthCryptReq& operator=(const PB_AthCryptReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_AthCryptReq& default_instance();
  void Swap(PB_AthCryptReq* other);
  
  // implements Message ----------------------------------------------
  
  PB_AthCryptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_AthCryptReq& from);
  void MergeFrom(const PB_AthCryptReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes public_data = 1;
  inline bool has_public_data() const;
  inline void clear_public_data();
  static const int kPublicDataFieldNumber = 1;
  inline const ::std::string& public_data() const;
  inline void set_public_data(const ::std::string& value);
  inline void set_public_data(const char* value);
  inline void set_public_data(const void* value, size_t size);
  inline ::std::string* mutable_public_data();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* public_data_;
  static const ::std::string _default_public_data_;
  friend void  protobuf_AddDesc_encrypt_2eproto();
  friend void protobuf_AssignDesc_encrypt_2eproto();
  friend void protobuf_ShutdownFile_encrypt_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PB_AthCryptReq* default_instance_;
};
// -------------------------------------------------------------------

class PB_AthCryptRsp : public ::google::protobuf::Message {
 public:
  PB_AthCryptRsp();
  virtual ~PB_AthCryptRsp();
  
  PB_AthCryptRsp(const PB_AthCryptRsp& from);
  
  inline PB_AthCryptRsp& operator=(const PB_AthCryptRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_AthCryptRsp& default_instance();
  void Swap(PB_AthCryptRsp* other);
  
  // implements Message ----------------------------------------------
  
  PB_AthCryptRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_AthCryptRsp& from);
  void MergeFrom(const PB_AthCryptRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional bytes public_data = 2;
  inline bool has_public_data() const;
  inline void clear_public_data();
  static const int kPublicDataFieldNumber = 2;
  inline const ::std::string& public_data() const;
  inline void set_public_data(const ::std::string& value);
  inline void set_public_data(const char* value);
  inline void set_public_data(const void* value, size_t size);
  inline ::std::string* mutable_public_data();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 result_;
  ::std::string* public_data_;
  static const ::std::string _default_public_data_;
  friend void  protobuf_AddDesc_encrypt_2eproto();
  friend void protobuf_AssignDesc_encrypt_2eproto();
  friend void protobuf_ShutdownFile_encrypt_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PB_AthCryptRsp* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// PB_AthCryptReq

// optional bytes public_data = 1;
inline bool PB_AthCryptReq::has_public_data() const {
  return _has_bit(0);
}
inline void PB_AthCryptReq::clear_public_data() {
  if (public_data_ != &_default_public_data_) {
    public_data_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& PB_AthCryptReq::public_data() const {
  return *public_data_;
}
inline void PB_AthCryptReq::set_public_data(const ::std::string& value) {
  _set_bit(0);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  public_data_->assign(value);
}
inline void PB_AthCryptReq::set_public_data(const char* value) {
  _set_bit(0);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  public_data_->assign(value);
}
inline void PB_AthCryptReq::set_public_data(const void* value, size_t size) {
  _set_bit(0);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  public_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_AthCryptReq::mutable_public_data() {
  _set_bit(0);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  return public_data_;
}

// -------------------------------------------------------------------

// PB_AthCryptRsp

// optional int32 result = 1;
inline bool PB_AthCryptRsp::has_result() const {
  return _has_bit(0);
}
inline void PB_AthCryptRsp::clear_result() {
  result_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 PB_AthCryptRsp::result() const {
  return result_;
}
inline void PB_AthCryptRsp::set_result(::google::protobuf::int32 value) {
  _set_bit(0);
  result_ = value;
}

// optional bytes public_data = 2;
inline bool PB_AthCryptRsp::has_public_data() const {
  return _has_bit(1);
}
inline void PB_AthCryptRsp::clear_public_data() {
  if (public_data_ != &_default_public_data_) {
    public_data_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PB_AthCryptRsp::public_data() const {
  return *public_data_;
}
inline void PB_AthCryptRsp::set_public_data(const ::std::string& value) {
  _set_bit(1);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  public_data_->assign(value);
}
inline void PB_AthCryptRsp::set_public_data(const char* value) {
  _set_bit(1);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  public_data_->assign(value);
}
inline void PB_AthCryptRsp::set_public_data(const void* value, size_t size) {
  _set_bit(1);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  public_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_AthCryptRsp::mutable_public_data() {
  _set_bit(1);
  if (public_data_ == &_default_public_data_) {
    public_data_ = new ::std::string;
  }
  return public_data_;
}


}  // namespace protobuf
}  // namespace moa
}  // namespace sangfor
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_encrypt_2eproto__INCLUDED
