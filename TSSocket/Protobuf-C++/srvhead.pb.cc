// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "srvhead.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace com {
namespace sangfor {
namespace moa {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* PB_ModMsgId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_ModMsgId_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_SrvHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_SrvHead_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_srvhead_2eproto() {
  protobuf_AddDesc_srvhead_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "srvhead.proto");
  GOOGLE_CHECK(file != NULL);
  PB_ModMsgId_descriptor_ = file->message_type(0);
  static const int PB_ModMsgId_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, client_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, disp_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, workflow_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, servermap_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, notify_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, file_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, srvrpc_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, entry_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, workflowdisp_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, mtunnel_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, web_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, reg_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, httpport_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, oprtproxy_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, oprtdisp_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, legwork_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, permit_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, acc_conn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, acc_cli_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, acc_data_seq_),
  };
  PB_ModMsgId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_ModMsgId_descriptor_,
      PB_ModMsgId::default_instance_,
      PB_ModMsgId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ModMsgId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_ModMsgId));
  PB_SrvHead_descriptor_ = file->message_type(1);
  static const int PB_SrvHead_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, srvop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, mmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, from_did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, from_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, to_did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, to_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, err_no_),
  };
  PB_SrvHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_SrvHead_descriptor_,
      PB_SrvHead::default_instance_,
      PB_SrvHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_SrvHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_SrvHead));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_srvhead_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_ModMsgId_descriptor_, &PB_ModMsgId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_SrvHead_descriptor_, &PB_SrvHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_srvhead_2eproto() {
  delete PB_ModMsgId::default_instance_;
  delete PB_ModMsgId_reflection_;
  delete PB_SrvHead::default_instance_;
  delete PB_SrvHead_reflection_;
}

void protobuf_AddDesc_srvhead_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsrvhead.proto\022\030com.sangfor.moa.protobu"
    "f\"\340\003\n\013PB_ModMsgId\022\025\n\rclient_req_id\030\001 \001(\004"
    "\022\023\n\013disp_req_id\030\002 \001(\004\022\027\n\017workflow_req_id"
    "\030\007 \001(\004\022\030\n\020servermap_req_id\030\016 \001(\004\022\025\n\rnoti"
    "fy_req_id\030\021 \001(\004\022\023\n\013file_req_id\030\022 \001(\004\022\025\n\r"
    "srvrpc_req_id\030\023 \001(\004\022\024\n\014entry_req_id\030\024 \001("
    "\004\022\033\n\023workflowdisp_req_id\030\025 \001(\004\022\026\n\016mtunne"
    "l_req_id\030\026 \001(\004\022\022\n\nweb_req_id\030\027 \001(\004\022\022\n\nre"
    "g_req_id\030\030 \001(\004\022\027\n\017httpport_req_id\030\031 \001(\004\022"
    "\030\n\020oprtproxy_req_id\030\032 \001(\004\022\027\n\017oprtdisp_re"
    "q_id\030\033 \001(\004\022\026\n\016legwork_req_id\030\034 \001(\004\022\025\n\rpe"
    "rmit_req_id\030\035 \001(\004\022\023\n\013acc_conn_id\0303 \001(\004\022\026"
    "\n\016acc_cli_req_id\0304 \001(\004\022\024\n\014acc_data_seq\0305"
    " \001(\004\"\265\001\n\nPB_SrvHead\022\r\n\005srvop\030\001 \002(\r\022\014\n\004fl"
    "ag\030\002 \001(\r\0223\n\004mmid\030\003 \001(\0132%.com.sangfor.moa"
    ".protobuf.PB_ModMsgId\022\020\n\010from_did\030\004 \001(\003\022"
    "\020\n\010from_pid\030\005 \001(\003\022\016\n\006to_did\030\006 \001(\003\022\016\n\006to_"
    "pid\030\007 \001(\003\022\021\n\006err_no\030\010 \001(\005:\0010", 708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "srvhead.proto", &protobuf_RegisterTypes);
  PB_ModMsgId::default_instance_ = new PB_ModMsgId();
  PB_SrvHead::default_instance_ = new PB_SrvHead();
  PB_ModMsgId::default_instance_->InitAsDefaultInstance();
  PB_SrvHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_srvhead_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_srvhead_2eproto {
  StaticDescriptorInitializer_srvhead_2eproto() {
    protobuf_AddDesc_srvhead_2eproto();
  }
} static_descriptor_initializer_srvhead_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PB_ModMsgId::kClientReqIdFieldNumber;
const int PB_ModMsgId::kDispReqIdFieldNumber;
const int PB_ModMsgId::kWorkflowReqIdFieldNumber;
const int PB_ModMsgId::kServermapReqIdFieldNumber;
const int PB_ModMsgId::kNotifyReqIdFieldNumber;
const int PB_ModMsgId::kFileReqIdFieldNumber;
const int PB_ModMsgId::kSrvrpcReqIdFieldNumber;
const int PB_ModMsgId::kEntryReqIdFieldNumber;
const int PB_ModMsgId::kWorkflowdispReqIdFieldNumber;
const int PB_ModMsgId::kMtunnelReqIdFieldNumber;
const int PB_ModMsgId::kWebReqIdFieldNumber;
const int PB_ModMsgId::kRegReqIdFieldNumber;
const int PB_ModMsgId::kHttpportReqIdFieldNumber;
const int PB_ModMsgId::kOprtproxyReqIdFieldNumber;
const int PB_ModMsgId::kOprtdispReqIdFieldNumber;
const int PB_ModMsgId::kLegworkReqIdFieldNumber;
const int PB_ModMsgId::kPermitReqIdFieldNumber;
const int PB_ModMsgId::kAccConnIdFieldNumber;
const int PB_ModMsgId::kAccCliReqIdFieldNumber;
const int PB_ModMsgId::kAccDataSeqFieldNumber;
#endif  // !_MSC_VER

PB_ModMsgId::PB_ModMsgId() {
  SharedCtor();
}

void PB_ModMsgId::InitAsDefaultInstance() {
}

PB_ModMsgId::PB_ModMsgId(const PB_ModMsgId& from) {
  SharedCtor();
  MergeFrom(from);
}

void PB_ModMsgId::SharedCtor() {
  _cached_size_ = 0;
  client_req_id_ = GOOGLE_ULONGLONG(0);
  disp_req_id_ = GOOGLE_ULONGLONG(0);
  workflow_req_id_ = GOOGLE_ULONGLONG(0);
  servermap_req_id_ = GOOGLE_ULONGLONG(0);
  notify_req_id_ = GOOGLE_ULONGLONG(0);
  file_req_id_ = GOOGLE_ULONGLONG(0);
  srvrpc_req_id_ = GOOGLE_ULONGLONG(0);
  entry_req_id_ = GOOGLE_ULONGLONG(0);
  workflowdisp_req_id_ = GOOGLE_ULONGLONG(0);
  mtunnel_req_id_ = GOOGLE_ULONGLONG(0);
  web_req_id_ = GOOGLE_ULONGLONG(0);
  reg_req_id_ = GOOGLE_ULONGLONG(0);
  httpport_req_id_ = GOOGLE_ULONGLONG(0);
  oprtproxy_req_id_ = GOOGLE_ULONGLONG(0);
  oprtdisp_req_id_ = GOOGLE_ULONGLONG(0);
  legwork_req_id_ = GOOGLE_ULONGLONG(0);
  permit_req_id_ = GOOGLE_ULONGLONG(0);
  acc_conn_id_ = GOOGLE_ULONGLONG(0);
  acc_cli_req_id_ = GOOGLE_ULONGLONG(0);
  acc_data_seq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ModMsgId::~PB_ModMsgId() {
  SharedDtor();
}

void PB_ModMsgId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PB_ModMsgId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ModMsgId_descriptor_;
}

const PB_ModMsgId& PB_ModMsgId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_srvhead_2eproto();  return *default_instance_;
}

PB_ModMsgId* PB_ModMsgId::default_instance_ = NULL;

PB_ModMsgId* PB_ModMsgId::New() const {
  return new PB_ModMsgId;
}

void PB_ModMsgId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_req_id_ = GOOGLE_ULONGLONG(0);
    disp_req_id_ = GOOGLE_ULONGLONG(0);
    workflow_req_id_ = GOOGLE_ULONGLONG(0);
    servermap_req_id_ = GOOGLE_ULONGLONG(0);
    notify_req_id_ = GOOGLE_ULONGLONG(0);
    file_req_id_ = GOOGLE_ULONGLONG(0);
    srvrpc_req_id_ = GOOGLE_ULONGLONG(0);
    entry_req_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    workflowdisp_req_id_ = GOOGLE_ULONGLONG(0);
    mtunnel_req_id_ = GOOGLE_ULONGLONG(0);
    web_req_id_ = GOOGLE_ULONGLONG(0);
    reg_req_id_ = GOOGLE_ULONGLONG(0);
    httpport_req_id_ = GOOGLE_ULONGLONG(0);
    oprtproxy_req_id_ = GOOGLE_ULONGLONG(0);
    oprtdisp_req_id_ = GOOGLE_ULONGLONG(0);
    legwork_req_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    permit_req_id_ = GOOGLE_ULONGLONG(0);
    acc_conn_id_ = GOOGLE_ULONGLONG(0);
    acc_cli_req_id_ = GOOGLE_ULONGLONG(0);
    acc_data_seq_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_ModMsgId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &client_req_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_disp_req_id;
        break;
      }
      
      // optional uint64 disp_req_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_disp_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &disp_req_id_));
        _set_bit(1);
        if (input->ExpectTag(56)) goto parse_workflow_req_id;
        break;
      }
      
      // optional uint64 workflow_req_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_workflow_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &workflow_req_id_));
        _set_bit(2);
        if (input->ExpectTag(112)) goto parse_servermap_req_id;
        break;
      }
      
      // optional uint64 servermap_req_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_servermap_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &servermap_req_id_));
        _set_bit(3);
        if (input->ExpectTag(136)) goto parse_notify_req_id;
        break;
      }
      
      // optional uint64 notify_req_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_notify_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &notify_req_id_));
        _set_bit(4);
        if (input->ExpectTag(144)) goto parse_file_req_id;
        break;
      }
      
      // optional uint64 file_req_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_file_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &file_req_id_));
        _set_bit(5);
        if (input->ExpectTag(152)) goto parse_srvrpc_req_id;
        break;
      }
      
      // optional uint64 srvrpc_req_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_srvrpc_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &srvrpc_req_id_));
        _set_bit(6);
        if (input->ExpectTag(160)) goto parse_entry_req_id;
        break;
      }
      
      // optional uint64 entry_req_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_entry_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &entry_req_id_));
        _set_bit(7);
        if (input->ExpectTag(168)) goto parse_workflowdisp_req_id;
        break;
      }
      
      // optional uint64 workflowdisp_req_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_workflowdisp_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &workflowdisp_req_id_));
        _set_bit(8);
        if (input->ExpectTag(176)) goto parse_mtunnel_req_id;
        break;
      }
      
      // optional uint64 mtunnel_req_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mtunnel_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &mtunnel_req_id_));
        _set_bit(9);
        if (input->ExpectTag(184)) goto parse_web_req_id;
        break;
      }
      
      // optional uint64 web_req_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_web_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &web_req_id_));
        _set_bit(10);
        if (input->ExpectTag(192)) goto parse_reg_req_id;
        break;
      }
      
      // optional uint64 reg_req_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_reg_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &reg_req_id_));
        _set_bit(11);
        if (input->ExpectTag(200)) goto parse_httpport_req_id;
        break;
      }
      
      // optional uint64 httpport_req_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_httpport_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &httpport_req_id_));
        _set_bit(12);
        if (input->ExpectTag(208)) goto parse_oprtproxy_req_id;
        break;
      }
      
      // optional uint64 oprtproxy_req_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oprtproxy_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &oprtproxy_req_id_));
        _set_bit(13);
        if (input->ExpectTag(216)) goto parse_oprtdisp_req_id;
        break;
      }
      
      // optional uint64 oprtdisp_req_id = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oprtdisp_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &oprtdisp_req_id_));
        _set_bit(14);
        if (input->ExpectTag(224)) goto parse_legwork_req_id;
        break;
      }
      
      // optional uint64 legwork_req_id = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_legwork_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &legwork_req_id_));
        _set_bit(15);
        if (input->ExpectTag(232)) goto parse_permit_req_id;
        break;
      }
      
      // optional uint64 permit_req_id = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_permit_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &permit_req_id_));
        _set_bit(16);
        if (input->ExpectTag(408)) goto parse_acc_conn_id;
        break;
      }
      
      // optional uint64 acc_conn_id = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_acc_conn_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &acc_conn_id_));
        _set_bit(17);
        if (input->ExpectTag(416)) goto parse_acc_cli_req_id;
        break;
      }
      
      // optional uint64 acc_cli_req_id = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_acc_cli_req_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &acc_cli_req_id_));
        _set_bit(18);
        if (input->ExpectTag(424)) goto parse_acc_data_seq;
        break;
      }
      
      // optional uint64 acc_data_seq = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_acc_data_seq:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &acc_data_seq_));
        _set_bit(19);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ModMsgId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PB_ModMsgId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 client_req_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_req_id(), output);
  }
  
  // optional uint64 disp_req_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->disp_req_id(), output);
  }
  
  // optional uint64 workflow_req_id = 7;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->workflow_req_id(), output);
  }
  
  // optional uint64 servermap_req_id = 14;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->servermap_req_id(), output);
  }
  
  // optional uint64 notify_req_id = 17;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->notify_req_id(), output);
  }
  
  // optional uint64 file_req_id = 18;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->file_req_id(), output);
  }
  
  // optional uint64 srvrpc_req_id = 19;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->srvrpc_req_id(), output);
  }
  
  // optional uint64 entry_req_id = 20;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->entry_req_id(), output);
  }
  
  // optional uint64 workflowdisp_req_id = 21;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->workflowdisp_req_id(), output);
  }
  
  // optional uint64 mtunnel_req_id = 22;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->mtunnel_req_id(), output);
  }
  
  // optional uint64 web_req_id = 23;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->web_req_id(), output);
  }
  
  // optional uint64 reg_req_id = 24;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->reg_req_id(), output);
  }
  
  // optional uint64 httpport_req_id = 25;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->httpport_req_id(), output);
  }
  
  // optional uint64 oprtproxy_req_id = 26;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->oprtproxy_req_id(), output);
  }
  
  // optional uint64 oprtdisp_req_id = 27;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->oprtdisp_req_id(), output);
  }
  
  // optional uint64 legwork_req_id = 28;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->legwork_req_id(), output);
  }
  
  // optional uint64 permit_req_id = 29;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->permit_req_id(), output);
  }
  
  // optional uint64 acc_conn_id = 51;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(51, this->acc_conn_id(), output);
  }
  
  // optional uint64 acc_cli_req_id = 52;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->acc_cli_req_id(), output);
  }
  
  // optional uint64 acc_data_seq = 53;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->acc_data_seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_ModMsgId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 client_req_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_req_id(), target);
  }
  
  // optional uint64 disp_req_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->disp_req_id(), target);
  }
  
  // optional uint64 workflow_req_id = 7;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->workflow_req_id(), target);
  }
  
  // optional uint64 servermap_req_id = 14;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->servermap_req_id(), target);
  }
  
  // optional uint64 notify_req_id = 17;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->notify_req_id(), target);
  }
  
  // optional uint64 file_req_id = 18;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->file_req_id(), target);
  }
  
  // optional uint64 srvrpc_req_id = 19;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->srvrpc_req_id(), target);
  }
  
  // optional uint64 entry_req_id = 20;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->entry_req_id(), target);
  }
  
  // optional uint64 workflowdisp_req_id = 21;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->workflowdisp_req_id(), target);
  }
  
  // optional uint64 mtunnel_req_id = 22;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->mtunnel_req_id(), target);
  }
  
  // optional uint64 web_req_id = 23;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->web_req_id(), target);
  }
  
  // optional uint64 reg_req_id = 24;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->reg_req_id(), target);
  }
  
  // optional uint64 httpport_req_id = 25;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->httpport_req_id(), target);
  }
  
  // optional uint64 oprtproxy_req_id = 26;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->oprtproxy_req_id(), target);
  }
  
  // optional uint64 oprtdisp_req_id = 27;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->oprtdisp_req_id(), target);
  }
  
  // optional uint64 legwork_req_id = 28;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->legwork_req_id(), target);
  }
  
  // optional uint64 permit_req_id = 29;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->permit_req_id(), target);
  }
  
  // optional uint64 acc_conn_id = 51;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(51, this->acc_conn_id(), target);
  }
  
  // optional uint64 acc_cli_req_id = 52;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->acc_cli_req_id(), target);
  }
  
  // optional uint64 acc_data_seq = 53;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->acc_data_seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_ModMsgId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 client_req_id = 1;
    if (has_client_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_req_id());
    }
    
    // optional uint64 disp_req_id = 2;
    if (has_disp_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->disp_req_id());
    }
    
    // optional uint64 workflow_req_id = 7;
    if (has_workflow_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workflow_req_id());
    }
    
    // optional uint64 servermap_req_id = 14;
    if (has_servermap_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->servermap_req_id());
    }
    
    // optional uint64 notify_req_id = 17;
    if (has_notify_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notify_req_id());
    }
    
    // optional uint64 file_req_id = 18;
    if (has_file_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_req_id());
    }
    
    // optional uint64 srvrpc_req_id = 19;
    if (has_srvrpc_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srvrpc_req_id());
    }
    
    // optional uint64 entry_req_id = 20;
    if (has_entry_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entry_req_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 workflowdisp_req_id = 21;
    if (has_workflowdisp_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workflowdisp_req_id());
    }
    
    // optional uint64 mtunnel_req_id = 22;
    if (has_mtunnel_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mtunnel_req_id());
    }
    
    // optional uint64 web_req_id = 23;
    if (has_web_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->web_req_id());
    }
    
    // optional uint64 reg_req_id = 24;
    if (has_reg_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reg_req_id());
    }
    
    // optional uint64 httpport_req_id = 25;
    if (has_httpport_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->httpport_req_id());
    }
    
    // optional uint64 oprtproxy_req_id = 26;
    if (has_oprtproxy_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oprtproxy_req_id());
    }
    
    // optional uint64 oprtdisp_req_id = 27;
    if (has_oprtdisp_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oprtdisp_req_id());
    }
    
    // optional uint64 legwork_req_id = 28;
    if (has_legwork_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->legwork_req_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 permit_req_id = 29;
    if (has_permit_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permit_req_id());
    }
    
    // optional uint64 acc_conn_id = 51;
    if (has_acc_conn_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acc_conn_id());
    }
    
    // optional uint64 acc_cli_req_id = 52;
    if (has_acc_cli_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acc_cli_req_id());
    }
    
    // optional uint64 acc_data_seq = 53;
    if (has_acc_data_seq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acc_data_seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PB_ModMsgId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_ModMsgId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_ModMsgId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_ModMsgId::MergeFrom(const PB_ModMsgId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_client_req_id(from.client_req_id());
    }
    if (from._has_bit(1)) {
      set_disp_req_id(from.disp_req_id());
    }
    if (from._has_bit(2)) {
      set_workflow_req_id(from.workflow_req_id());
    }
    if (from._has_bit(3)) {
      set_servermap_req_id(from.servermap_req_id());
    }
    if (from._has_bit(4)) {
      set_notify_req_id(from.notify_req_id());
    }
    if (from._has_bit(5)) {
      set_file_req_id(from.file_req_id());
    }
    if (from._has_bit(6)) {
      set_srvrpc_req_id(from.srvrpc_req_id());
    }
    if (from._has_bit(7)) {
      set_entry_req_id(from.entry_req_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_workflowdisp_req_id(from.workflowdisp_req_id());
    }
    if (from._has_bit(9)) {
      set_mtunnel_req_id(from.mtunnel_req_id());
    }
    if (from._has_bit(10)) {
      set_web_req_id(from.web_req_id());
    }
    if (from._has_bit(11)) {
      set_reg_req_id(from.reg_req_id());
    }
    if (from._has_bit(12)) {
      set_httpport_req_id(from.httpport_req_id());
    }
    if (from._has_bit(13)) {
      set_oprtproxy_req_id(from.oprtproxy_req_id());
    }
    if (from._has_bit(14)) {
      set_oprtdisp_req_id(from.oprtdisp_req_id());
    }
    if (from._has_bit(15)) {
      set_legwork_req_id(from.legwork_req_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_permit_req_id(from.permit_req_id());
    }
    if (from._has_bit(17)) {
      set_acc_conn_id(from.acc_conn_id());
    }
    if (from._has_bit(18)) {
      set_acc_cli_req_id(from.acc_cli_req_id());
    }
    if (from._has_bit(19)) {
      set_acc_data_seq(from.acc_data_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_ModMsgId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_ModMsgId::CopyFrom(const PB_ModMsgId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ModMsgId::IsInitialized() const {
  
  return true;
}

void PB_ModMsgId::Swap(PB_ModMsgId* other) {
  if (other != this) {
    std::swap(client_req_id_, other->client_req_id_);
    std::swap(disp_req_id_, other->disp_req_id_);
    std::swap(workflow_req_id_, other->workflow_req_id_);
    std::swap(servermap_req_id_, other->servermap_req_id_);
    std::swap(notify_req_id_, other->notify_req_id_);
    std::swap(file_req_id_, other->file_req_id_);
    std::swap(srvrpc_req_id_, other->srvrpc_req_id_);
    std::swap(entry_req_id_, other->entry_req_id_);
    std::swap(workflowdisp_req_id_, other->workflowdisp_req_id_);
    std::swap(mtunnel_req_id_, other->mtunnel_req_id_);
    std::swap(web_req_id_, other->web_req_id_);
    std::swap(reg_req_id_, other->reg_req_id_);
    std::swap(httpport_req_id_, other->httpport_req_id_);
    std::swap(oprtproxy_req_id_, other->oprtproxy_req_id_);
    std::swap(oprtdisp_req_id_, other->oprtdisp_req_id_);
    std::swap(legwork_req_id_, other->legwork_req_id_);
    std::swap(permit_req_id_, other->permit_req_id_);
    std::swap(acc_conn_id_, other->acc_conn_id_);
    std::swap(acc_cli_req_id_, other->acc_cli_req_id_);
    std::swap(acc_data_seq_, other->acc_data_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_ModMsgId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_ModMsgId_descriptor_;
  metadata.reflection = PB_ModMsgId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_SrvHead::kSrvopFieldNumber;
const int PB_SrvHead::kFlagFieldNumber;
const int PB_SrvHead::kMmidFieldNumber;
const int PB_SrvHead::kFromDidFieldNumber;
const int PB_SrvHead::kFromPidFieldNumber;
const int PB_SrvHead::kToDidFieldNumber;
const int PB_SrvHead::kToPidFieldNumber;
const int PB_SrvHead::kErrNoFieldNumber;
#endif  // !_MSC_VER

PB_SrvHead::PB_SrvHead() {
  SharedCtor();
}

void PB_SrvHead::InitAsDefaultInstance() {
  mmid_ = const_cast< ::com::sangfor::moa::protobuf::PB_ModMsgId*>(&::com::sangfor::moa::protobuf::PB_ModMsgId::default_instance());
}

PB_SrvHead::PB_SrvHead(const PB_SrvHead& from) {
  SharedCtor();
  MergeFrom(from);
}

void PB_SrvHead::SharedCtor() {
  _cached_size_ = 0;
  srvop_ = 0u;
  flag_ = 0u;
  mmid_ = NULL;
  from_did_ = GOOGLE_LONGLONG(0);
  from_pid_ = GOOGLE_LONGLONG(0);
  to_did_ = GOOGLE_LONGLONG(0);
  to_pid_ = GOOGLE_LONGLONG(0);
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_SrvHead::~PB_SrvHead() {
  SharedDtor();
}

void PB_SrvHead::SharedDtor() {
  if (this != default_instance_) {
    delete mmid_;
  }
}

const ::google::protobuf::Descriptor* PB_SrvHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_SrvHead_descriptor_;
}

const PB_SrvHead& PB_SrvHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_srvhead_2eproto();  return *default_instance_;
}

PB_SrvHead* PB_SrvHead::default_instance_ = NULL;

PB_SrvHead* PB_SrvHead::New() const {
  return new PB_SrvHead;
}

void PB_SrvHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srvop_ = 0u;
    flag_ = 0u;
    if (_has_bit(2)) {
      if (mmid_ != NULL) mmid_->::com::sangfor::moa::protobuf::PB_ModMsgId::Clear();
    }
    from_did_ = GOOGLE_LONGLONG(0);
    from_pid_ = GOOGLE_LONGLONG(0);
    to_did_ = GOOGLE_LONGLONG(0);
    to_pid_ = GOOGLE_LONGLONG(0);
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_SrvHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 srvop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &srvop_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flag:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &flag_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_mmid;
        break;
      }
      
      // optional .com.sangfor.moa.protobuf.PB_ModMsgId mmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mmid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_mmid()));
        if (input->ExpectTag(32)) goto parse_from_did;
        break;
      }
      
      // optional int64 from_did = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_from_did:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &from_did_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_from_pid;
        break;
      }
      
      // optional int64 from_pid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_from_pid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &from_pid_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_to_did;
        break;
      }
      
      // optional int64 to_did = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_to_did:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &to_did_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_to_pid;
        break;
      }
      
      // optional int64 to_pid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_to_pid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &to_pid_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_err_no;
        break;
      }
      
      // optional int32 err_no = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_err_no:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &err_no_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_SrvHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PB_SrvHead::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 srvop = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srvop(), output);
  }
  
  // optional uint32 flag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }
  
  // optional .com.sangfor.moa.protobuf.PB_ModMsgId mmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->mmid(), output);
  }
  
  // optional int64 from_did = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->from_did(), output);
  }
  
  // optional int64 from_pid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->from_pid(), output);
  }
  
  // optional int64 to_did = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->to_did(), output);
  }
  
  // optional int64 to_pid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->to_pid(), output);
  }
  
  // optional int32 err_no = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->err_no(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_SrvHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 srvop = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srvop(), target);
  }
  
  // optional uint32 flag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }
  
  // optional .com.sangfor.moa.protobuf.PB_ModMsgId mmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mmid(), target);
  }
  
  // optional int64 from_did = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->from_did(), target);
  }
  
  // optional int64 from_pid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->from_pid(), target);
  }
  
  // optional int64 to_did = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->to_did(), target);
  }
  
  // optional int64 to_pid = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->to_pid(), target);
  }
  
  // optional int32 err_no = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->err_no(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_SrvHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 srvop = 1;
    if (has_srvop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srvop());
    }
    
    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }
    
    // optional .com.sangfor.moa.protobuf.PB_ModMsgId mmid = 3;
    if (has_mmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mmid());
    }
    
    // optional int64 from_did = 4;
    if (has_from_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from_did());
    }
    
    // optional int64 from_pid = 5;
    if (has_from_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from_pid());
    }
    
    // optional int64 to_did = 6;
    if (has_to_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->to_did());
    }
    
    // optional int64 to_pid = 7;
    if (has_to_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->to_pid());
    }
    
    // optional int32 err_no = 8 [default = 0];
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PB_SrvHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_SrvHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_SrvHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_SrvHead::MergeFrom(const PB_SrvHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_srvop(from.srvop());
    }
    if (from._has_bit(1)) {
      set_flag(from.flag());
    }
    if (from._has_bit(2)) {
      mutable_mmid()->::com::sangfor::moa::protobuf::PB_ModMsgId::MergeFrom(from.mmid());
    }
    if (from._has_bit(3)) {
      set_from_did(from.from_did());
    }
    if (from._has_bit(4)) {
      set_from_pid(from.from_pid());
    }
    if (from._has_bit(5)) {
      set_to_did(from.to_did());
    }
    if (from._has_bit(6)) {
      set_to_pid(from.to_pid());
    }
    if (from._has_bit(7)) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_SrvHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_SrvHead::CopyFrom(const PB_SrvHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SrvHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PB_SrvHead::Swap(PB_SrvHead* other) {
  if (other != this) {
    std::swap(srvop_, other->srvop_);
    std::swap(flag_, other->flag_);
    std::swap(mmid_, other->mmid_);
    std::swap(from_did_, other->from_did_);
    std::swap(from_pid_, other->from_pid_);
    std::swap(to_did_, other->to_did_);
    std::swap(to_pid_, other->to_pid_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_SrvHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_SrvHead_descriptor_;
  metadata.reflection = PB_SrvHead_reflection_;
  return metadata;
}


}  // namespace protobuf
}  // namespace moa
}  // namespace sangfor
}  // namespace com
