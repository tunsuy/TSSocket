// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "encrypt.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace com {
namespace sangfor {
namespace moa {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* PB_AthCryptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_AthCryptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_AthCryptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_AthCryptRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_encrypt_2eproto() {
  protobuf_AddDesc_encrypt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "encrypt.proto");
  GOOGLE_CHECK(file != NULL);
  PB_AthCryptReq_descriptor_ = file->message_type(0);
  static const int PB_AthCryptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AthCryptReq, public_data_),
  };
  PB_AthCryptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_AthCryptReq_descriptor_,
      PB_AthCryptReq::default_instance_,
      PB_AthCryptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AthCryptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AthCryptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_AthCryptReq));
  PB_AthCryptRsp_descriptor_ = file->message_type(1);
  static const int PB_AthCryptRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AthCryptRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AthCryptRsp, public_data_),
  };
  PB_AthCryptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_AthCryptRsp_descriptor_,
      PB_AthCryptRsp::default_instance_,
      PB_AthCryptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AthCryptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AthCryptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_AthCryptRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_encrypt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_AthCryptReq_descriptor_, &PB_AthCryptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_AthCryptRsp_descriptor_, &PB_AthCryptRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_encrypt_2eproto() {
  delete PB_AthCryptReq::default_instance_;
  delete PB_AthCryptReq_reflection_;
  delete PB_AthCryptRsp::default_instance_;
  delete PB_AthCryptRsp_reflection_;
}

void protobuf_AddDesc_encrypt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rencrypt.proto\022\030com.sangfor.moa.protobu"
    "f\"%\n\016PB_AthCryptReq\022\023\n\013public_data\030\001 \001(\014"
    "\"5\n\016PB_AthCryptRsp\022\016\n\006result\030\001 \001(\005\022\023\n\013pu"
    "blic_data\030\002 \001(\014", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "encrypt.proto", &protobuf_RegisterTypes);
  PB_AthCryptReq::default_instance_ = new PB_AthCryptReq();
  PB_AthCryptRsp::default_instance_ = new PB_AthCryptRsp();
  PB_AthCryptReq::default_instance_->InitAsDefaultInstance();
  PB_AthCryptRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_encrypt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_encrypt_2eproto {
  StaticDescriptorInitializer_encrypt_2eproto() {
    protobuf_AddDesc_encrypt_2eproto();
  }
} static_descriptor_initializer_encrypt_2eproto_;


// ===================================================================

const ::std::string PB_AthCryptReq::_default_public_data_;
#ifndef _MSC_VER
const int PB_AthCryptReq::kPublicDataFieldNumber;
#endif  // !_MSC_VER

PB_AthCryptReq::PB_AthCryptReq() {
  SharedCtor();
}

void PB_AthCryptReq::InitAsDefaultInstance() {
}

PB_AthCryptReq::PB_AthCryptReq(const PB_AthCryptReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void PB_AthCryptReq::SharedCtor() {
  _cached_size_ = 0;
  public_data_ = const_cast< ::std::string*>(&_default_public_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_AthCryptReq::~PB_AthCryptReq() {
  SharedDtor();
}

void PB_AthCryptReq::SharedDtor() {
  if (public_data_ != &_default_public_data_) {
    delete public_data_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PB_AthCryptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AthCryptReq_descriptor_;
}

const PB_AthCryptReq& PB_AthCryptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_encrypt_2eproto();  return *default_instance_;
}

PB_AthCryptReq* PB_AthCryptReq::default_instance_ = NULL;

PB_AthCryptReq* PB_AthCryptReq::New() const {
  return new PB_AthCryptReq;
}

void PB_AthCryptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (public_data_ != &_default_public_data_) {
        public_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_AthCryptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_public_data()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_AthCryptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PB_AthCryptReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes public_data = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->public_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_AthCryptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes public_data = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_AthCryptReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes public_data = 1;
    if (has_public_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PB_AthCryptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_AthCryptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_AthCryptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_AthCryptReq::MergeFrom(const PB_AthCryptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_public_data(from.public_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_AthCryptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_AthCryptReq::CopyFrom(const PB_AthCryptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_AthCryptReq::IsInitialized() const {
  
  return true;
}

void PB_AthCryptReq::Swap(PB_AthCryptReq* other) {
  if (other != this) {
    std::swap(public_data_, other->public_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_AthCryptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_AthCryptReq_descriptor_;
  metadata.reflection = PB_AthCryptReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PB_AthCryptRsp::_default_public_data_;
#ifndef _MSC_VER
const int PB_AthCryptRsp::kResultFieldNumber;
const int PB_AthCryptRsp::kPublicDataFieldNumber;
#endif  // !_MSC_VER

PB_AthCryptRsp::PB_AthCryptRsp() {
  SharedCtor();
}

void PB_AthCryptRsp::InitAsDefaultInstance() {
}

PB_AthCryptRsp::PB_AthCryptRsp(const PB_AthCryptRsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void PB_AthCryptRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  public_data_ = const_cast< ::std::string*>(&_default_public_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_AthCryptRsp::~PB_AthCryptRsp() {
  SharedDtor();
}

void PB_AthCryptRsp::SharedDtor() {
  if (public_data_ != &_default_public_data_) {
    delete public_data_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PB_AthCryptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AthCryptRsp_descriptor_;
}

const PB_AthCryptRsp& PB_AthCryptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_encrypt_2eproto();  return *default_instance_;
}

PB_AthCryptRsp* PB_AthCryptRsp::default_instance_ = NULL;

PB_AthCryptRsp* PB_AthCryptRsp::New() const {
  return new PB_AthCryptRsp;
}

void PB_AthCryptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (_has_bit(1)) {
      if (public_data_ != &_default_public_data_) {
        public_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_AthCryptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_public_data;
        break;
      }
      
      // optional bytes public_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_data:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_public_data()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_AthCryptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PB_AthCryptRsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional bytes public_data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->public_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_AthCryptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes public_data = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_AthCryptRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional bytes public_data = 2;
    if (has_public_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PB_AthCryptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_AthCryptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_AthCryptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_AthCryptRsp::MergeFrom(const PB_AthCryptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_public_data(from.public_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_AthCryptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_AthCryptRsp::CopyFrom(const PB_AthCryptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_AthCryptRsp::IsInitialized() const {
  
  return true;
}

void PB_AthCryptRsp::Swap(PB_AthCryptRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(public_data_, other->public_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_AthCryptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_AthCryptRsp_descriptor_;
  metadata.reflection = PB_AthCryptRsp_reflection_;
  return metadata;
}


}  // namespace protobuf
}  // namespace moa
}  // namespace sangfor
}  // namespace com
